
import yang
import yang.schema as schema

def get_list_name(sn: schema.DList) -> str:
    sn_parent = sn.parent
    if sn_parent is not None:
        return sn.name
    raise NotImplementedError("List without parent")

def get_key_types(sn: schema.DList) -> list[str]:
    key_types = []
    for kn in sn.key:
        kl = sn.get(kn)
        if isinstance(kl, schema.DLeaf):
            key_types.append(kl.type_.name)
        else:
            raise ValueError(f"Key {kn} is not a leaf")
    return key_types

class TTTSrc(object):
    def __init__(self, src: str, input_classes: list[str], state_classes: list[str], imports: list[str], defs: list[str], base_defs: list[str], act_defs: list[str]):
        self.src = src
        self.input_classes = input_classes
        self.state_classes = state_classes
        self.imports = imports
        self.defs = defs
        self.base_defs = base_defs
        self.act_defs = act_defs

def children_to_tttsrc(sn: schema.DNodeInner) -> TTTSrc:
    input_classes = []
    state_classes = []
    imports = []
    defs = []
    base_defs = []
    elems = []
    act_defs = []
    for child in sn.children:
        if isinstance(child, schema.DLeaf):
            continue
        res = dschema_to_tttsrc(child, set_ns=child.namespace!=sn.namespace)
        input_classes.extend(res.input_classes)
        state_classes.extend(res.state_classes)
        imports.extend(res.imports)
        defs.extend(res.defs)
        base_defs.extend(res.base_defs)
        act_defs.extend(res.act_defs)
        elems.append(f'"{child.name}": {res.src}')
    children_src = ", ".join(elems)
    return TTTSrc(src=children_src, input_classes=input_classes, state_classes=state_classes, imports=imports, defs=defs, base_defs=base_defs, act_defs=act_defs)

def dschema_to_tttsrc(sn: schema.DNode, indent=0, set_ns=True) -> TTTSrc:
    input_classes = []
    state_classes = []
    imports = []
    defs = []
    base_defs = []
    act_defs = []

    def nsq(node: schema.DNode) -> str:
        if set_ns and node.namespace != "":
            return ", ns='{node.namespace}', module='{node.module}'"
        return ""

    if isinstance(sn, schema.DList):
        for ext in sn.exts:
            extprefix = ext.prefix
            if extprefix is not None and extprefix == "orchestron":
                extarg = ext.arg
                if ext.name == "transform" or ext.name == "rfs-transform":
                    if extarg is not None:
                        transform = extarg
                        # TODO: somewhere we should check that the transform
                        # reference is valid, i.e. an instance of ttt.Transform
                        transform_module = ".".join(transform.split(".")[:-1])
                        transform_name = transform.split(".")[-1]
                        imports.append("import %s" % transform_module)
                        input_class = schema.get_path_name(sn)
                        if isinstance(sn, schema.DList):
                            input_class += "_entry"
                        input_classes.append(input_class)
                        memory_class = None
                        dynstate_class = None
                        for child in sn.children:
                            if isinstance(child, schema.DContainer):
                                for subext in child.exts:
                                    subextprefix = subext.prefix
                                    if subextprefix is not None and subextprefix == "orchestron":
                                        subextname = subext.name
                                        if subextname == "memory":
                                            _memory_class: str = schema.get_path_name(child)
                                            state_classes.append(_memory_class)
                                            input_classes.append(_memory_class)
                                            memory_class = _memory_class
                                        elif subextname == "dynstate":
                                            _dynstate_class: str = schema.get_path_name(child)
                                            state_classes.append(input_class)
                                            state_classes.append(_dynstate_class)
                                            input_classes.append(_dynstate_class)
                                            dynstate_class = _dynstate_class
                        wrapper_extra_params = ", device_info" if ext.name == "rfs-transform" else ""
                        wrapper_extra_models = "\n"
                        transform_extra_typed_params = ""
                        if memory_class is not None:
                            wrapper_extra_params += ", modeled_memory"
                            wrapper_extra_models += "        modeled_memory = %s.from_gdata(memory) if memory is not None else None\n" % memory_class
                            transform_extra_typed_params += ", memory: ?%s" % memory_class
                            transform_output = "(yang.adata.MNode, ?yang.adata.MNode)"
                        else:
                            transform_output = "yang.adata.MNode"
                        if dynstate_class is not None:
                            wrapper_extra_params += ", modeled_dynstate"
                            wrapper_extra_models += "        modeled_dynstate = %s.from_gdata(dynstate) if dynstate is not None else None\n" % dynstate_class
                            transform_extra_typed_params += ", dynstate: ?%s" % dynstate_class
                            transform_actor_fq = transform + "Transform"
                            transform_actor_ctor = transform_name + "TransformCtor"
                            memory_conv = ", %s.from_gdata(m) if m is not None else None" % memory_class if memory_class is not None else ""
                            act_defs.append("""def %s(update_dynstate: proc(?yang.adata.MNode) -> None) -> ?proc(yang.gdata.Node, ?yang.gdata.Node) -> None:
    def _update_dynstate(dynstate: ?%s):
        update_dynstate(dynstate)
    act = %s(_update_dynstate)
    return proc lambda c, m: act.on_conf(%s.from_gdata(c)%s)
""" % (transform_actor_ctor, dynstate_class, transform_actor_fq, input_class, memory_conv))
                        else:
                            transform_actor_ctor = "None"
                        if memory_class is not None:
                            wrapper_return = "output, new_memory = self.transform(modeled_input%s)\n" % wrapper_extra_params + \
                                "        return output.to_gdata(), new_memory.to_gdata() if new_memory is not None else None"
                        else:
                            wrapper_return = "return self.transform(modeled_input%s).to_gdata(), None" % wrapper_extra_params

                        deserializer = schema.get_path(sn).split("/")[1:]
                        if ext.name == "transform":
                            base_defs.append(f"""class {transform_name}(ttt.TransformFunction):
    transform: mut({input_class}{transform_extra_typed_params}) -> {transform_output}

    @staticmethod
    def input_type():
        \"\"\"Return the modeled input type for this transform\"\"\"
        return {input_class}

    mut def transform_wrapper(self, i: yang.gdata.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        \"\"\"Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        \"\"\"
        modeled_input = {input_class}.from_gdata(i){wrapper_extra_models}
        {wrapper_return}

    mut def transform_xml(self, i: xml.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        \"\"\"Wrap the user provided transform method to convert from XML to
        modeled input and return gdata
        \"\"\"
        gdata_input = from_xml(i, {deserializer})
        modeled_input = {input_class}.from_gdata(gdata_input){wrapper_extra_models}
        {wrapper_return}
""")
                            return TTTSrc(src="ttt.List(ttt.Transform({transform}, {transform_actor_ctor}, lower, log_handler), {repr(sn.key)}, {repr(get_key_types(sn))}{nsq(sn)})", input_classes=input_classes, state_classes=state_classes, imports=imports, defs=defs, base_defs=base_defs, act_defs=act_defs)

                        elif ext.name == "rfs-transform":
                            base_defs.append(f"""class {transform_name}(ttt.RFSFunction):
    transform: mut({input_class}, ttt.DeviceInfo{transform_extra_typed_params}) -> {transform_output}

    @staticmethod
    def input_type():
        \"\"\"Return the modeled input type for this transform\"\"\"
        return {input_class}

    mut def transform_wrapper(self, i: yang.gdata.Node, device_info: ttt.DeviceInfo, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        \"\"\"Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        \"\"\"
        modeled_input = {input_class}.from_gdata(i){wrapper_extra_models}
        {wrapper_return}

    mut def transform_xml(self, i: xml.Node, device_info: ttt.DeviceInfo, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        \"\"\"Wrap the user provided transform method to convert from XML to
        modeled input and return gdata
        \"\"\"
        gdata_input = from_xml(i, {deserializer})
        modeled_input = {input_class}.from_gdata(gdata_input){wrapper_extra_models}
        {wrapper_return}
""")
                            return TTTSrc(src="ttt.List(ttt.RFSTransform({transform}, dev_registry, {transform_actor_ctor}, lower, log_handler), {repr(sn.key)}, {repr(get_key_types(sn))}{nsq(sn)})", input_classes=input_classes, state_classes=state_classes, imports=imports, defs=defs, base_defs=base_defs, act_defs=act_defs)
                        raise ValueError("Unknown extension name: {ext.name}")
                    else:
                        raise ValueError("Missing argument to orchestron:transform. Add path to transform as arg.")
                elif ext.name == "device":
                    if extarg is not None:
                        raise ValueError("Extraneous argument to orchestron:device. Remove argument.")
                    return TTTSrc(src="ttt.List(ttt.Device(dev_registry, log_handler), {repr(sn.key)}, {repr(get_key_types(sn))}{nsq(sn)})", input_classes=input_classes, state_classes=state_classes, imports=imports, defs=defs, base_defs=base_defs, act_defs=act_defs)
                elif ext.name == "device-config":
                    if extarg is not None:
                        raise ValueError("Extraneous argument to orchestron:device-config. Remove argument.")
                    return TTTSrc(src="ttt.List(ttt.DeviceConfig(dev_registry, log_handler), {repr(sn.key)}, {repr(get_key_types(sn))}{nsq(sn)})", input_classes=input_classes, state_classes=state_classes, imports=imports, defs=defs, base_defs=base_defs, act_defs=act_defs)

        # List without an extension
        children_res = children_to_tttsrc(sn)
        input_classes.extend(children_res.input_classes)
        state_classes.extend(children_res.state_classes)
        imports.extend(children_res.imports)
        defs.extend(children_res.defs)
        base_defs.extend(children_res.base_defs)
        act_defs.extend(children_res.act_defs)
        return TTTSrc(src="ttt.List(ttt.Container({{{children_res.src}}}), {repr(sn.key)}, {repr(get_key_types(sn))}{nsq(sn)})", input_classes=input_classes, state_classes=state_classes, imports=imports, defs=defs, base_defs=base_defs, act_defs=act_defs)

    elif isinstance(sn, schema.DNodeInner):
        sn_children = sn.children
        children_res = children_to_tttsrc(sn)
        input_classes.extend(children_res.input_classes)
        state_classes.extend(children_res.state_classes)
        imports.extend(children_res.imports)
        defs.extend(children_res.defs)
        base_defs.extend(children_res.base_defs)
        act_defs.extend(children_res.act_defs)
        return TTTSrc(src="ttt.Container({{{children_res.src}}}{nsq(sn)})", input_classes=input_classes, state_classes=state_classes, imports=imports, defs=defs, base_defs=base_defs, act_defs=act_defs)

    raise NotImplementedError(f"Unhandled schema type: {type(sn)}")

def ttt_prsrc(sn: schema.DNode, input_yang_module: str, output_yang_module: ?str) -> (base: str, ttt: str):
    ts = dschema_to_tttsrc(sn)

    base_src = "# WARNING WARNING WARNING WARNING WARNING\n"
    base_src += "# DO NOT MODIFY THIS FILE!! This file is generated!\n"
    base_src += "# WARNING WARNING WARNING WARNING WARNING\n\n"
    base_src += "import logging\nimport xml\nimport orchestron.ttt as ttt\nimport yang.adata\nimport yang.gdata\n\n"
    for ic in ts.input_classes:
        base_src += f"from {input_yang_module} import {ic}\n"
    base_src += f"from {input_yang_module} import from_xml_gen3 as from_xml\n"

    if output_yang_module is not None:
        base_src += f"from {output_yang_module} import root as output_root\n\n"
        base_src += "def o_root():\n"
        base_src += "    return output_root()\n\n"

    base_src += "\n"
    base_src += "\n".join(ts.base_defs)

    ttt_src = "# WARNING WARNING WARNING WARNING WARNING\n"
    ttt_src += "# DO NOT MODIFY THIS FILE!! This file is generated!\n"
    ttt_src += "# WARNING WARNING WARNING WARNING WARNING\n\n"
    ttt_src += "import logging\n\n"
    ttt_src += "import orchestron.device as odev\n"
    ttt_src += "import orchestron.ttt as ttt\nimport yang.adata\nimport yang.gdata\n\n"
    ttt_src += "\n".join(list(set(ts.imports))) + "\n\n"
    for sc in ts.state_classes:
        ttt_src += "from %s import %s\n" % (input_yang_module, sc)
    ttt_src += "\n"
    ttt_src += "def get_ttt(lower: ?ttt.Layer, dev_registry: odev.DeviceRegistry, log_handler: ?logging.Handler=None) -> proc(list[str],?ttt.Layer)->ttt.Node:\n"
    ttt_src += f"    r = {ts.src}\n    return r\n"
    if len(ts.act_defs) > 0:
        ttt_src += "\n"
    ttt_src += "\n\n".join(list(set(ts.act_defs)))
    return (base=base_src, ttt=ttt_src)
