import file
import re
import yang
import yang.schema
import orchestron.ttt_gen as ttt_gen
import orchestron.yang as oyang
import transform_unions
import yang.parser


def _maybe_write_file(fc: file.FileCap, name: str, content: str) -> bool:
    """Write new content to a file if the content is different from existing content"""
    rfc = file.ReadFileCap(fc)
    wfc = file.WriteFileCap(fc)
    old_content = ""
    try:
        rf = file.ReadFile(rfc, name)
        old_content = rf.read().decode()
    except FileNotFoundError:
        pass
    if old_content != content:
        wf = file.WriteFile(wfc, name)
        await async wf.write(content.encode())
        await async wf.close()
        return True
    return False

class SysSpec(object):
    def __init__(self, name: str, layers: list[Layer], device_types: list[DeviceType]):
        self.name = name
        self.layers = layers
        self.device_types = device_types

    def gen_app(self, fc: file.FileCap, output_dir: str):
        return self.compile().gen_app(fc, output_dir)

    def compile(self):
        compiled_layers = [CompiledLayer(yang.compile(l.models), l.models, l.name) for l in self.layers]
        compiled_dev_types = [CompiledDeviceType(yang.compile(dev_type.models), dev_type.models, dev_type.name) for dev_type in self.device_types]
        return CompiledSysSpec(self.name, compiled_layers, compiled_dev_types)

class CompiledSysSpec(object):
    """Orchestration System specification

    This defines the core of the orchestration system, including the layers and
    supported device types
    """
    layers: list[CompiledLayer]
    def __init__(self, name: str, layers: list[CompiledLayer], device_types: list[CompiledDeviceType]):
        self.name = name
        self.layers = layers + [CompiledLayer(yang.compile([oyang.device]), [oyang.device])]
        self.dev_types = {dev_type.name: dev_type for dev_type in device_types}

    def gen_app(self, fc: file.FileCap, output_dir: str):
        tttsrc = "# WARNING WARNING WARNING WARNING WARNING\n"
        tttsrc += "# DO NOT MODIFY THIS FILE!! This file is generated!\n"
        tttsrc += "# WARNING WARNING WARNING WARNING WARNING\n\n"
        tttsrc += "import logging\n\n"
        tttsrc += "import orchestron.device as odev\n"
        tttsrc += "import orchestron.ttt as ttt\n"
        tttsrc += "import yang.adata\n"
        tttsrc += "import yang.gdata\n\n"
        tttsrc_getlayers = "def get_layers(dev_registry: odev.DeviceRegistry, log_handler: ?logging.Handler=None):\n"
        # for idx, layer in reversed(enumerate(self.layers)):
        layers_len = len(self.layers)
        idx = layers_len
        for layer in reversed(self.layers):
            idx -= 1
            print(f"Generating layer {idx}")
            layer_name = layer.name
            lname = layer_name if layer_name is not None else str(idx)
            name = f"{output_dir}/{self.name}/layers/y_{lname}.act"
            modname = f"{self.name}.layers.y_{lname}"
    #        if idx == 0:
    #            name = "src/y_cfs.act"
    #        elif idx == len(layers) - 1:
    #            name = "src/y_rfs.act"

            if _maybe_write_file(fc, name, layer.print()):
                print(f"+ Layer {idx} adata changed")
            else:
                print(f"+ Layer {idx} adata unchanged")

            tttsrc += f"import {self.name}.layers.t_{idx}\n"
            print(f"Generating base & TTT(?) for layer {idx}")

            # Not for the last layer
            out_layer_modname = None
            if idx < len(self.layers) - 1:
                out_layer_modname = f"{self.name}.layers.y_{idx+1}_loose"

            tttl = ttt_gen.ttt_prsrc(layer.root, modname, out_layer_modname)

            base_name = f"{output_dir}/{self.name}/layers/base_{idx}.act"
            if _maybe_write_file(fc, base_name, tttl.base):
                print(f"+ Layer {idx} base changed")
            else:
                print(f"+ Layer {idx} base unchanged")

            t_name = f"{output_dir}/{self.name}/layers/t_{idx}.act"
            if _maybe_write_file(fc, t_name, tttl.ttt):
                print(f"+ Layer {idx} TTT(?) changed")
            else:
                print(f"+ Layer {idx} TTT(?) unchanged")

            lowerlayer = f"layer{idx+1}" if idx < layers_len -1 else "None"
            tttsrc_getlayers += f"    layer{idx} = ttt.Layer('{lname}', {self.name}.layers.t_{idx}.get_ttt({lowerlayer}, dev_registry, log_handler), {lowerlayer})\n"

            loose_name = f"{output_dir}/{self.name}/layers/y_{idx}_loose.act"
            if _maybe_write_file(fc, loose_name, layer.print(loose=True)):
                print(f"+ Layer {idx} loose adata changed")
            else:
                print(f"+ Layer {idx} loose adata unchanged")

        syssrc = "import orchestron.device as odev\n\n"
        syssrc_devtypes = ""
        for dev_type in self.dev_types.values():
            print(f"Generating device type {dev_type.name}")
            name = f"{output_dir}/{self.name}/devices/{dev_type.name}.act"
            if _maybe_write_file(fc, name, dev_type.print(loose=True, gen_json=False)):
                print(f"+ Device type {dev_type.name} adata changed")
            else:
                print(f"+ Device type {dev_type.name} adata unchanged")

            modname = "{self.name}.devices.{dev_type.name}"
            syssrc += "import {modname}\n"
            syssrc_devtypes += """    "{dev_type.name}": odev.DeviceType(name="{dev_type.name}",
            adapter_type=odev.NetconfAdapter,
            schema_namespaces={modname}.schema_namespaces,
            root={modname}.root,
            from_gdata={modname}.root.from_gdata,
            from_xml={modname}.from_xml,
            from_xml_gen3={modname}.from_xml_gen3
        ),
"""
        syssrc += "device_types = {{\n"
        syssrc += syssrc_devtypes
        syssrc += "}}\n"
        if _maybe_write_file(fc, "{output_dir}/{self.name}/sysspec.act", syssrc):
            print("+ Sys spec changed")
        else:
            print("+ Sys spec unchanged")

        print("Generating app layers.act")
        tttsrc_getlayers += "    return layer0\n"
        tttsrc += tttsrc_getlayers
        if _maybe_write_file(fc, f"{output_dir}/{self.name}/layers.act", tttsrc):
            print("+ App layers.act changed")
        else:
            print("+ App layers.act unchanged")

class SchemaTransformChain:
    """SchemaTransform chain to be applied to a YANG module

    Use the SchemaTransformChain to apply a series of schema transforms to a
    YANG module. Note that this is a temporary solution until we come up with a
    better design for SysSpec using a build graph.

    The module_pattern attribute is a regex pattern that may match multiple
    modules. The input module names must end in .yang.orig and be placed in the
    search directory. After transforming the outputs are saved in a module
    without the .orig suffix.
    """
    def __init__(self, module_pattern: str, transforms: list[SchemaTransform]):
        self.module_pattern = module_pattern
        self.transforms = transforms

    def apply(self, yang_text: str) -> str:
        for t in self.transforms:
            yang_text = t.apply(yang_text)
        return yang_text

    def matches(self, module: str) -> bool:
        m = re.match(self.module_pattern, module)
        return True if m is not None else False

class SchemaTransform:
    """SchemaTransform to be applied to a YANG module
    """
    name: str

    # The apply method effect is incorrecty inferred as mut. It is true that
    # the implementations call mut functions, but these effects do not leak
    # outside of the apply() method.
    def apply(self, yang_text: str) -> str:
        raise NotImplementedError()

class SchemaTransformNoComments(SchemaTransform):
    def __init__(self):
        self.name = "no_comments"

    def apply(self, yang_text: str) -> str:
        y = yang.parser.parse(yang_text)
        return y.pryang()

class SchemaTransformUnions(SchemaTransform):
    def __init__(self):
        self.name = "rewrite_unions"

    def apply(self, yang_text: str) -> str:
        n = yang.schema_from_src(yang_text)
        transform_unions.rewrite_unions(n)
        return n.to_statement().pryang()

class Layer(object):
    """Orchestration System layer definition

    Contains a list of models that are part of the layer
    """
    def __init__(self, models: list[str], name: ?str=None):
        self.models = models
        self.name = name

    @staticmethod
    def from_dir(fc: file.FileCap, dir: str, name: ?str=None) -> Layer:
        """Create a Layer from YANG models in a directory

        This method simply loads all .yang files from the specified directory
        to create a Layer.
        """
        rfc = file.ReadFileCap(fc)
        fs = file.FS(fc)
        models = [file.ReadFile(rfc, f"{dir}/{f}").read().decode() for f in fs.listdir(dir) if f.endswith(".yang")]
        return Layer(models, name)

class _CompiledLayerBase(object):
    root: yang.schema.DRoot
    src: list[str]

    def print(self, loose=False, gen_json=True):
        """Print the Acton (adata) classes for the layer

        This prints the entire contents of the Acton module representing a
        single layer in the application. The module includes generated adata
        classes, XML and JSON deserializers and the schema info. The schema is
        used by the XML and JSON schema-driven deserializers.
        """
        return self.root.prdaclass(schema_yang=self.src, loose=loose, gen_json=gen_json)

class CompiledLayer(_CompiledLayerBase):
    def __init__(self, root: yang.schema.DRoot, src: list[str], name: ?str=None):
        self.root = root
        self.src = src
        self.name = name

class CompiledDeviceType(_CompiledLayerBase):
    def __init__(self, root: yang.schema.DRoot, src: list[str], name: str):
        self.root = root
        self.src = src
        self.name = name

def apply_schema_transforms_to_dir(fc: file.FileCap, dir: str, transforms: list[SchemaTransformChain]=[]) -> None:
    """Apply schema transformations to YANG files in a directory.

    This function processes files in the specified directory using the provided
    transform chains. Files that match a transform chain's pattern will be
    processed and the transformed output will be written back to the same
    directory without the .orig suffix.
    """
    rfc = file.ReadFileCap(fc)
    wfc = file.WriteFileCap(fc)
    fs = file.FS(fc)

    for in_name in fs.listdir(dir):
        yang_text = None
        for tc in transforms:
            if not tc.matches(in_name):
                continue
            if yang_text is None:
                rf = file.ReadFile(rfc, file.join_path([dir, in_name]))
                yang_text = rf.read().decode()
            if yang_text is not None:
                for t in tc.transforms:
                    print(f"Applying transform {t.name} to {in_name}")
                    yang_text = t.apply(yang_text)
        if yang_text is not None:
            # Remove the .orig suffix
            out_name = in_name[:-5]
            print(f"Writing {out_name}")
            wf = file.WriteFile(wfc, file.join_path([dir, out_name]))
            await async wf.write(yang_text.encode())

class DeviceType(object):
    def __init__(self, name: str, models: list[str]):
        self.name = name
        self.models = models

    @staticmethod
    def from_dir(fc: file.FileCap, name: str, dir: str) -> DeviceType:
        """Create a DeviceType DTO from YANG models in a directory

        This method simply loads all .yang files from the specified directory
        to create a DeviceType.
        """
        rfc = file.ReadFileCap(fc)
        fs = file.FS(fc)
        models = [file.ReadFile(rfc, f"{dir}/{f}").read().decode() for f in fs.listdir(dir) if f.endswith(".yang")]
        return DeviceType(name, models)
