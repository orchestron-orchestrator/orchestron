import testing
import diff
import logging

import orchestron.ttt as ttt
#import orchestron.gdata as gdata
import yang.gdata as gdata


tree1 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "k1"),
        "n1": gdata.Leaf("int", 1),
        "n2": gdata.Leaf("int", 2)
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "k4"),
        "n4": gdata.Leaf("int", 4)
    })
])

tree1diff = gdata.List(["name"], [
    gdata.Absent({
        "name": gdata.Leaf("string", "k1")
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "k4"),
        "n4": gdata.Leaf("int", 0)
    })
])

tree1pruned = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "k4"),
        "n4": gdata.Leaf("int", 0)
    })
])

tree2 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "k1"),
        "n2": gdata.Leaf("int", 2)
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "k2"),
        "n1": gdata.Leaf("int", 1),
        "n3": gdata.Leaf("int", 3)
    })
])

merge_1_2 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "k1"),
        "n1": gdata.Leaf("int", 1),
        "n2": gdata.Leaf("int", 2)
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "k2"),
        "n1": gdata.Leaf("int", 1),
        "n3": gdata.Leaf("int", 3)
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "k4"),
        "n4": gdata.Leaf("int", 4)
    })
])


########################

actor basic_commit(t: testing.AsyncT):
    tlist = ttt.List(ttt.Transform(ttt.PassThrough), ["name"], ["string"]) ([], None)
    t1 = tlist.newtrans()

    t1.configure("1", {'srcA': tree1}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        t.success()

    t1.lock("1", None, cont1)


########################

actor basic_delete(t: testing.AsyncT):
    tlist = ttt.List(ttt.Transform(ttt.PassThrough), ["name"], ["string"]) ([], None)
    t1 = tlist.newtrans()

    def cont2(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1pruned)
        t.success()

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        t1.configure("1", {'srcA': tree1diff}, None)
        t1.lock("1", None, cont2)

    t1.configure("1", {'srcA': tree1}, None)
    t1.lock("1", None, cont1)


########################

actor all_delete(t: testing.AsyncT):
    in1 = gdata.List(["name"], [
            gdata.Container({
                "name": gdata.Leaf("str", "k1"),
                "x": gdata.Leaf("int", 1)
            }),
            gdata.Container({
                "name": gdata.Leaf("str", "k2"),
                "x": gdata.Leaf("int", 2)
            }),
        ])

    tlist = ttt.List(ttt.Transform(ttt.PassThrough), ["name"], ["str"]) ([], None)
    t1 = tlist.newtrans()
    t1.configure("1", {"srcA": in1})

    def cont1(r):
        t1.commit("1", True)
        out1 = t1.get()
        testing.assertEqual(out1, in1)
        t1.configure("1", {"srcA": gdata.Absent()})

        def cont2(r):
            if isinstance(r, str):
                testing.assertEqual(r, "Empty")
            t1.commit("1", True)
            out2 = t1.get()
            exp2 = gdata.List(["name"], [])
            testing.assertEqual(out2, exp2)
            t.success()

        t1.lock("1", None, cont2)

    t1.lock("1", None, cont1)

########################

actor partial_delete(t: testing.AsyncT):
    inA = gdata.List(["name"], [
            gdata.Container({
                "name": gdata.Leaf("str", "k1"),
                "x": gdata.Leaf("int", 1)
            }),
            gdata.Container({
                "name": gdata.Leaf("str", "k2"),
                "x": gdata.Leaf("int", 2)
            })
        ])

    inB = gdata.List(["name"], [
            gdata.Container({
                "name": gdata.Leaf("str", "k2"),
                "x": gdata.Leaf("int", 2)
            }),
            gdata.Container({
                "name": gdata.Leaf("str", "k3"),
                "x": gdata.Leaf("int", 3)
            }),
        ])

    tlist = ttt.List(ttt.Transform(ttt.PassThrough), ["name"], ["str"]) ([], None)
    t1 = tlist.newtrans()
    t1.configure("1", {"srcA": inA, "srcB": inB})

    def cont1(r):
        t1.commit("1", True)
        out1 = t1.get()
        exp1 = gdata.List(["name"], [
                gdata.Container({
                    "name": gdata.Leaf("str", "k1"),
                    "x": gdata.Leaf("int", 1)
                }),
                gdata.Container({
                    "name": gdata.Leaf("str", "k2"),
                    "x": gdata.Leaf("int", 2)
                }),
                gdata.Container({
                    "name": gdata.Leaf("str", "k3"),
                    "x": gdata.Leaf("int", 3)
                }),
            ])
        testing.assertEqual(out1, exp1)
        t1.configure("1", {"srcA": gdata.Absent()})

        def cont2(r):
            t1.commit("1", True)
            out2 = t1.get()
            testing.assertEqual(out2, inB)
            t.success()

        t1.lock("1", None, cont2)

    t1.lock("1", None, cont1)

########################

actor nested_delete(t: testing.AsyncT):
    in1 = gdata.List(["name"], [
            gdata.Container({
                "name": gdata.Leaf("str", "k1"),
                "left": gdata.Container({
                    "x": gdata.Leaf("int", 1)
                }),
                "right": gdata.Container({
                    "y": gdata.Leaf("int", 1)
                }),
            }),
            gdata.Container({
                "name": gdata.Leaf("str", "k2"),
                "left": gdata.Container({
                    "x": gdata.Leaf("int", 2)
                }),
                "right": gdata.Container({
                    "y": gdata.Leaf("int", 2)
                }),
            }),
        ])

    tlist = ttt.List(
                ttt.Container({
                    "left": ttt.Transform(ttt.PassThrough),
                    "right": ttt.Transform(ttt.PassThrough)
                }), ["name"], ["str"]
            ) ([], None)
    t1 = tlist.newtrans()
    t1.configure("1", {"srcA": in1})

    def cont1(r):
        t1.commit("1", True)
        out1 = t1.get()
        testing.assertEqual(out1, in1)
        t1.configure("1", {"srcA": gdata.Absent()})

        def cont2(r):
            if isinstance(r, str):
                testing.assertEqual(r, "Empty")
            t1.commit("1", True)
            out2 = t1.get()
            exp2 = gdata.List(["name"], [])
            testing.assertEqual(out2, exp2)
            t.success()

        t1.lock("1", None, cont2)

    t1.lock("1", None, cont1)

########################

list1a = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "key1"),
        "a": gdata.Leaf("int", 0)
    })
])

list1b = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "key1"),
        "b": gdata.Leaf("int", 1)
    })
])

list1 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "key1"),
        "a": gdata.Leaf("int", 0),
        "b": gdata.Leaf("int", 1)
    })
])

actor simultaneous_create(t: testing.AsyncT):
    tlist = ttt.List(ttt.Transform(ttt.PassThrough), ["name"], ["string"]) ([], None)
    t1 = tlist.newtrans()
    t2 = tlist.newtrans()

    def cont1(_r: value):
        t2.lock("2", None, cont2)
        t1.commit("1", True)

    def cont2(_r: value):
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, list1)
        t.success()

    t1.configure("1", {'srcA': list1a}, None)
    t2.configure("2", {'srcB': list1b}, None)
    t1.lock("1", None, cont1)

########################

actor aborted_create(t: testing.AsyncT):
    tlist = ttt.List(ttt.Transform(ttt.PassThrough), ["name"], ["string"]) ([], None)
    t1 = tlist.newtrans()

    def cont1(_r: value):
        t1.commit("1", False)
        r = t1.get()
        testing.assertEqual(r, gdata.List(["name"], []))
        t.success()

    t1.configure("1", {'srcA': list1a}, None)
    t1.lock("1", None, cont1)

########################

y1 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "key0"),
        "a": gdata.Leaf("int", 0)
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "key1"),
        "a": gdata.Leaf("int", 1)
    })
])

y2 = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "key1"),
        "b": gdata.Leaf("int", 1)
    }),
    gdata.Container({
        "name": gdata.Leaf("string", "key2"),
        "a": gdata.Leaf("int", 1)
    })
])

y2b = gdata.List(["name"], [
    gdata.Container({
        "name": gdata.Leaf("string", "key1"),
        "b": gdata.Leaf("int", 1)
    })
])

actor aborted_create2(t: testing.AsyncT):
    tlist = ttt.List(ttt.Transform(ttt.PassThrough), ["name"], ["string"]) ([], None)
    t1 = tlist.newtrans()
    t2 = tlist.newtrans()

    def cont1(_r: value):
        t2.lock("2", None, cont2)
        t1.commit("1", False)

    def cont2(_r: value):
        t2.configure("2", {'srcB': y2b}, None)
        t2.commit("2", True)
        r = t2.get()
        if r != y2b:
            testing.assertEqual(r.prsrc(), y2b.prsrc())
        t.success()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y2}, None)
    t1.lock("1", None, cont1)

########################

# This is a test for a TTT.List top node without a transform function. When we
# read the data from TTT, we must get the same valid data back. That includes
# the key attribute and key child leafs set for the list element Container.
nested_tree = gdata.Container({
    "top-list": gdata.List(["name"], [
        gdata.Container({
            # This is the key leaf for the top-list list element, and it must remain in the output.
            "name": gdata.Leaf("str", "k1"),
            "nested-list": gdata.List(["id"], [
                gdata.Container({
                    "id": gdata.Leaf("str", "k1-k1"),
                    "a": gdata.Leaf("int", 1)
                })
            ])
        # This is the key attribute for the top-list list element, and it must remain in the output.
        }),
        gdata.Container({
            "name": gdata.Leaf("str", "k2"),
            "nested-list": gdata.List(["id"], [
                gdata.Container({
                    "id": gdata.Leaf("str", "k2-k1"),
                    "a": gdata.Leaf("int", 2)
                })
            ])
        })
    ])
})

actor nested_list(t: testing.AsyncT):
    tlist = ttt.Container({"top-list": ttt.List(ttt.Container({"nested-list": ttt.List(ttt.Transform(ttt.PassThrough), ["id"], ["string"])}), ["name"], ["string"])}) ([], None)
    t1 = tlist.newtrans()
    t1.configure("1", {'srcA': nested_tree}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        try:
            testing.assertEqual(nested_tree, r)
            t.success()
        except Exception as e:
            t.failure(Exception("Diff:\n{diff.diff(nested_tree.prsrc(), r.prsrc(), color=True)}"))
    t1.lock("1", None, cont1)

########################

