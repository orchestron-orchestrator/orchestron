import testing
import logging

import orchestron.ttt as ttt
#import orchestron.gdata as gdata
import yang.gdata as gdata


tree1 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], [
            gdata.Container({
                "n1": gdata.Leaf("int", 1),
                "n2": gdata.Leaf("int", 2)
            }, ["k1"]),
            gdata.Container({
                "n4": gdata.Leaf("int", 4)
            }, ["k4"])
        ])
    }),
    'right': gdata.Container({
        "a": gdata.LeafList("int", [1,2,3])
    })
})

tree2 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], [
            gdata.Container({
                "n2": gdata.Leaf("int", 2)
            }, ["k1"]),
            gdata.Container({
                "n1": gdata.Leaf("int", 1),
                "n3": gdata.Leaf("int", 3)
            }, ["k2"])
        ]),
    }),
    'right': gdata.Container({
        "b": gdata.Leaf("int", 1)
    })
})

merge_1_2 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], [
            gdata.Container({
                "n1": gdata.Leaf("int", 1),
                "n2": gdata.Leaf("int", 2)
            }, ["k1"]),
            gdata.Container({
                "n1": gdata.Leaf("int", 1),
                "n3": gdata.Leaf("int", 3)
            }, ["k2"]),
            gdata.Container({
                "n4": gdata.Leaf("int", 4)
            }, ["k4"])
        ]),
    }),
    'right': gdata.Container({
        "a": gdata.LeafList("int", [1,2,3]),
        "b": gdata.Leaf("int", 1)
    })
})


########################

actor basic_commit_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_basic_commit(done, logger: logging.Handler):
    c = basic_commit_tester(done)

########################

actor all_delete_tester(done: action(?bool, ?Exception)->None):
    in1 = gdata.Container({
            "left" : gdata.Container({
                "x": gdata.Leaf("int", 1)
            }),
            "right": gdata.Container({
                "x": gdata.Leaf("int", 2)
            })
        })

    tlist = ttt.Container({
                "left": ttt.Transform(ttt.PassThrough),
                "right": ttt.Transform(ttt.PassThrough)
            }) ([])
    t1 = tlist.newtrans()
    t1.configure("1", {"srcA": in1})

    def cont1(r):
        t1.commit("1", True)
        out1 = t1.get()
        testing.assertEqual(out1, in1)
        t1.configure("1", {"srcA": gdata.Absent()})

        def cont2(r):
            if isinstance(r, str):
                testing.assertEqual(r, "Empty")
            t1.commit("1", True)
            out2 = t1.get()
            exp2 = gdata.Container({
                "left": gdata.Container(),
                "right": gdata.Container()
            })
            testing.assertEqual(out2, exp2)
            done(True, None)

        t1.lock("1", None, cont2)

    t1.lock("1", None, cont1)

def _test_all_delete(done, logger: logging.Handler):
    c = all_delete_tester(done)

########################

actor nested_delete_tester(done: action(?bool, ?Exception)->None):
    in1 = gdata.Container({
        "left": gdata.List(["name"], [
            gdata.Container({
                "x": gdata.Leaf("int", 1)
            }, ["k1"]),
            gdata.Container({
                "x": gdata.Leaf("int", 2)
            }, ["k2"])
        ]),
        "right": gdata.List(["name"], [
            gdata.Container({
                "y": gdata.Leaf("int", 1)
            }, ["v1"]),
        ])
    })

    tlist = ttt.Container({
                "left": ttt.List(ttt.Transform(ttt.PassThrough), ["name"]),
                "right": ttt.List(ttt.Transform(ttt.PassThrough), ["name"])
            }) ([])
    t1 = tlist.newtrans()
    t1.configure("1", {"srcA": in1})

    def cont1(r):
        t1.commit("1", True)
        out1 = t1.get()
        testing.assertEqual(out1, in1)
        t1.configure("1", {"srcA": gdata.Absent()})

        def cont2(r):
            if isinstance(r, str):
                testing.assertEqual(r, "Empty")
            t1.commit("1", True)
            out2 = t1.get()
            exp2 = gdata.Container({
                "left": gdata.List(["name"], []),
                "right": gdata.List(["name"], [])
            })
            testing.assertEqual(out2, exp2)
            done(True, None)

        t1.lock("1", None, cont2)

    t1.lock("1", None, cont1)

def _test_nested_delete(done, logger: logging.Handler):
    c = nested_delete_tester(done)

########################

actor overlapping_commit_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)
    t2.configure("2", {'srcB': tree2}, None)

    def cont1(_r: value):
        t2.lock("2", None, cont2)
        t1.commit("1", True)

    def cont2(_r: value):
        r1 = t1.get()
        testing.assertEqual(r1, tree1)
        t2.commit("2", True)
        r2 = t2.get()
        testing.assertEqual(r2, merge_1_2)
        r1 = t1.get()
        testing.assertEqual(r1, r2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_overlapping_commit(done, logger: logging.Handler):
    c = overlapping_commit_tester(done)

########################

actor overlapping_commit_tester2(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)
    t2.configure("2", {'srcB': tree2}, None)

    def cont2(_r: value):
        t2.commit("2", True)
        t1.lock("1", None, cont1)

    def cont1(_r: value):
        r2 = t2.get()
        testing.assertEqual(r2, tree2)
        t1.commit("1", True)
        r1 = t1.get()
        testing.assertEqual(r1, merge_1_2)
        r2 = t2.get()
        testing.assertEqual(r1, r2)
        done(True, None)

    t2.lock("2", None, cont2)

def _test_overlapping_commit2(done, logger: logging.Handler):
    c = overlapping_commit_tester2(done)

########################

actor modified_commit_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)
    t1.configure("1", {'srcA': tree2}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r1 = t1.get()
        testing.assertEqual(r1, tree2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_modified_commit(done, logger: logging.Handler):
    c = modified_commit_tester(done)

########################

actor modified_commit_tester2(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)

    def cont1(_r: value):
        t1.configure("1", {'srcA': tree2}, None)
        t1.commit("1", True)
        r1 = t1.get()
        testing.assertEqual(r1, tree2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_modified_commit2(done, logger: logging.Handler):
    c = modified_commit_tester2(done)

########################

tree0 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], [
            gdata.Container({
                "n4": gdata.Leaf("int", 0)
            }, ["k4"])
        ]),
    }),
    'right': gdata.Container({
        "a": gdata.LeafList("int", [1,2,3])
    })
})

actor modified_overlapping_commit_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree0}, None)
    t2.configure("2", {'srcB': tree2}, None)

    def cont1(_r: value):
        t2.lock("2", None, cont2)
        t1.configure("1", {'srcA': tree1}, None)
        t1.commit("1", True)

    def cont2(_r: value):
        t2.commit("2", True)
        r2 = t2.get()
        testing.assertEqual(r2, merge_1_2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_modified_overlapping_commit(done, logger: logging.Handler):
    c = modified_overlapping_commit_tester(done)

########################

a0 = gdata.Container({
    'left': gdata.Container({
        'a': gdata.Leaf("int", 0)
    }),
    'right': gdata.Container({
        'x': gdata.Leaf("int", 0)
    })
})

a1 = gdata.Container({
    'left': gdata.Container({
        'a': gdata.Leaf("int", 1)
    })
})

b1 = gdata.Container({
    'left': gdata.Container({
        'b': gdata.Leaf("int", 1)
    })
})

a0b1 = gdata.Container({
    'left': gdata.Container({
        'a': gdata.Leaf("int", 0),
        'b': gdata.Leaf("int", 1)
    }),
    'right': gdata.Container({
        'x': gdata.Leaf("int", 0)
    })
})

actor config_failure_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    await async t1.configure("1", {'srcA': a0}, None)
    await async t2.configure("2", {'srcB': a1}, None)

    def cont1(_r: value):
        t1.commit("1", True)

        def cont2(_r: value):
            if isinstance(_r, Exception):
                t2.configure("2", {'srcB': b1}, None)
            t2.commit("2", True)
            r = t2.get()
            if r != a0b1:
                testing.assertEqual(r, a0b1)
            done(True, None)

        t2.lock("2", None, cont2)

    t1.lock("1", None, cont1)

def _test_config_failure(done, logger: logging.Handler):
    c = config_failure_tester(done)

########################

actor config_abort_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': a0}, None)
    t2.configure("2", {'srcB': a1}, None)

    def cont2(_r: value):
        t1.lock("1", None, cont1)
        t2.commit("2", False)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, a0)
        done(True, None)

    t2.lock("2", None, cont2)

def _test_config_abort(done, logger: logging.Handler):
    c = config_abort_tester(done)

########################

actor multi_lock_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)

    def cont1(_r: value):

        def cont2(_r: value):
            t1.configure("1", {'srcA': tree2}, None)
            t1.commit("1", True)
            r = t1.get()
            testing.assertEqual(r, tree2)
            done(True, None)

        t1.lock("1", None, cont2)

    t1.lock("1", None, cont1)

def _test_multi_lock(done, logger: logging.Handler):
    c = multi_lock_tester(done)

########################

tree3 = gdata.Container({
    'left': gdata.Container({
        "l1": gdata.List(["name"], []),
    }),
    'right': gdata.Container({
        "b": gdata.Leaf("int", 0)
    })
})

actor empty_lock_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t2.configure("2", {'srcB': tree3}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        t2.configure("2", {'srcB': tree2}, None)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, tree2)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_empty_lock(done, logger: logging.Handler):
    c = empty_lock_tester(done)

########################

actor empty_lock_tester2(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t2.configure("2", {'srcB': tree3}, None)

    def cont1(_r: value):
        t1.commit("1", True)    # Note: MAY happen before t2.commit!
        r2 = t2.get()
        testing.assertEqual(r2, tree2)
        r1 = t1.get()
        testing.assertEqual(r1, tree2)
        done(True, None)

    def cont2(_r: value):
        t2.configure("2", {'srcB': tree2}, None)
        t2.commit("2", True)
        t1.lock("1", None, cont1)

    t2.lock("2", None, cont2)

def _test_empty_lock2(done, logger: logging.Handler):
    c = empty_lock_tester2(done)

########################

actor no_lock_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)
    t2.configure("2", {'srcB': tree3}, None)

    def cont2(_r: value):
        t1.commit("1", True)
        t2.configure("2", {'srcB': tree2}, None)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, tree2)
        done(True, None)

    t2.lock("2", None, cont2)

def _test_no_lock(done, logger: logging.Handler):
    c = no_lock_tester(done)

########################

actor spurious_commit_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)

    def cont1(_r: value):
        t2.commit("2", True)

        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_spurious_commit(done, logger: logging.Handler):
    c = spurious_commit_tester(done)

########################

actor spurious_config_tester(done: action(?bool, ?Exception)->None):
    container = ttt.Container({
        'left': ttt.Transform(ttt.PassThrough),
        'right': ttt.Transform(ttt.PassThrough)
    }) ([])
    t1 = container.newtrans()
    t2 = container.newtrans()

    t1.configure("1", {'srcA': tree1}, None)
    t2.configure("2", {'srcB': tree2}, None)

    def cont1(_r: value):
        t2.configure("2", {'srcB': tree3}, None)
        t2.commit("2", True)

        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, tree1)
        done(True, None)

    t1.lock("1", None, cont1)

def _test_spurious_config(done, logger: logging.Handler):
    c = spurious_config_tester(done)

########################

actor main(env):
    config_failure_tester(lambda s,e: env.exit(0))
