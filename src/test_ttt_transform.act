import testing
import logging

import orchestron.device as odev
import orchestron.ttt as ttt
#import orchestron.gdata as gdata
import yang.gdata as gdata
import yang.adata as adata


y1 = gdata.Container({
    "a": gdata.Leaf("int", 1),
    "l1": gdata.List(["name"], [
        gdata.Container({
            "name": gdata.Leaf("string", "k1"),
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2)
        }),
        gdata.Container({
            "name": gdata.Leaf("string", "k4"),
            "n4": gdata.Leaf("int", 4)
        })
    ])
})
y1_transp = {
    "a": {
        'src': gdata.Leaf("int", 1)
    },
    "l1": {
        'src': gdata.List(["name"], [
            gdata.Container({
                "name": gdata.Leaf("string", "k1"),
                "n1": gdata.Leaf("int", 1),
                "n2": gdata.Leaf("int", 2)
            }),
            gdata.Container({
                "name": gdata.Leaf("string", "k4"),
                "n4": gdata.Leaf("int", 4)
            })
        ])
    }
}
y1_transp_l1 = {
    "k1": {
        'src': gdata.Container({
            "name": gdata.Leaf("string", "k1"),
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2)
        })
    },
    "k4": {
        'src': gdata.Container({
            "name": gdata.Leaf("string", "k4"),
            "n4": gdata.Leaf("int", 4)
        })
    }
}
y1_transp_l1_k1 = {
    "n1": {
        'src': gdata.Leaf("int", 1)
    },
    "n2": {
        'src': gdata.Leaf("int", 2)
    },
    "name": {
        'src': gdata.Leaf("string", "k1")
    }
}
y2 = gdata.Container({
    "b": gdata.Leaf("int", 2),
    "c": gdata.Leaf("int", 3),
    "l1": gdata.List(["name"], [
        gdata.Container({
            "name": gdata.Leaf("string", "k1"),
            "n2": gdata.Leaf("int", 2)
        }),
        gdata.Container({
            "name": gdata.Leaf("string", "k2"),
            "n1": gdata.Leaf("int", 1),
            "n3": gdata.Leaf("int", 3)
        })
    ]),
    "d": gdata.LeafList("string", ["a", "b", "c"])
})
merge_y1_y2 = gdata.Container({
    "a": gdata.Leaf("int", 1),
    "b": gdata.Leaf("int", 2),
    "c": gdata.Leaf("int", 3),
    "l1": gdata.List(["name"], [
        gdata.Container({
            "name": gdata.Leaf("string", "k1"),
            "n1": gdata.Leaf("int", 1),
            "n2": gdata.Leaf("int", 2)
        }),
        gdata.Container({
            "name": gdata.Leaf("string", "k2"),
            "n1": gdata.Leaf("int", 1),
            "n3": gdata.Leaf("int", 3)
        }),
        gdata.Container({
            "name": gdata.Leaf("string", "k4"),
            "n4": gdata.Leaf("int", 4)
        })
    ]),
    "d": gdata.LeafList("string", ["a", "b", "c"])
})


########################

def _test_transpose():
    transp0 = ttt.transpose({'src': y1})
    testing.assertEqual(transp0, y1_transp)

    transp1 = ttt.transpose(transp0["l1"])
    testing.assertEqual(transp1, y1_transp_l1)

    transp2 = ttt.transpose(transp1["k1"])
    testing.assertEqual(transp2, y1_transp_l1_k1)

def _test_transpose_absent():
    in1 = {
        "srcA": gdata.List(["id"], [
            gdata.Container({
                "id": gdata.Leaf("string", "k1"),
                "x": gdata.Leaf("int", 1)
            }),
            gdata.Container({
                "id": gdata.Leaf("string", "k2"),
                "x": gdata.Leaf("int", 2)
            }),
        ]),
        "srcB": gdata.Absent(),
        "srcC": gdata.List(["id"], [
            gdata.Container({
                "id": gdata.Leaf("string", "k2"),
                "x": gdata.Leaf("int", 2)
            })
        ])
    }
    out1 = ttt.transpose(in1)
    exp1 = {
        "k1": {
            "srcA": gdata.Container({
                "id": gdata.Leaf("string", "k1"),
                "x": gdata.Leaf("int", 1),
            })
        },
        ttt.WILDKEY: {
            "srcB": gdata.Absent()
        },
        "k2": {
            "srcA": gdata.Container({
                "id": gdata.Leaf("string", "k2"),
                "x": gdata.Leaf("int", 2),
            }),
            "srcC": gdata.Container({
                "id": gdata.Leaf("string", "k2"),
                "x": gdata.Leaf("int", 2),
            })
        }
    }
    testing.assertEqual(out1, exp1)

########################

def _test_multi_merge():
    mrg = gdata.merge(y1, y2)
    testing.assertEqual(mrg, merge_y1_y2)

    mrg1 = ttt.merge({'srcA': y1, 'srcB': y2})
    testing.assertEqual(mrg1, merge_y1_y2)

    mrg2: gdata.Node = ttt.merge({'srcB': y2})
    testing.assertEqual(mrg2, y2)

########################

def _test_patch():
    fst = {
        'srcA': y1,
        'srcB': y2
    }
    snd = {
        'srcA': gdata.Container({
            'l1': gdata.Absent()
        }),
        'srcB': gdata.Container({
            "b": gdata.Leaf("int", 0),
            'l1': gdata.List(["name"], [
                gdata.Absent({
                    "name": gdata.Leaf("string", "k2")
                })
            ]),
            'd': gdata.Absent()
        })
    }
    res = ttt.patch(fst, snd)
    exp = {
        'srcA': gdata.Container({
            'a': gdata.Leaf("int", 1)
        }),
        'srcB': gdata.Container({
            "b": gdata.Leaf("int", 0),
            "c": gdata.Leaf("int", 3),
            "l1": gdata.List(["name"], [
                gdata.Container({
                    "name": gdata.Leaf("string", "k1"),
                    "n2": gdata.Leaf("int", 2)
                })
            ])
        })
    }
    testing.assertEqual(res, exp)

########################

actor basic_commit(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()
    t3 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        t2.configure("2", {'srcB': y2}, None)

        def cont2(_r: value):
            t2.commit("2", True)
            r = t2.get()
            t3.configure("3", {
                'srcA': gdata.Container({
                    'l1': gdata.Absent()
                }),
                'srcB': gdata.Container({
                    'b': gdata.Absent(),
                    'd': gdata.LeafList("string", ['a','c'])
                })
            }, None)

            def cont3(_r: value):
                t3.commit("3", True)
                r = t3.get()
                expected = gdata.Container({
                    'a': gdata.Leaf("int", 1),
                    'c': gdata.Leaf("int", 3),
                    'l1': gdata.List(['name'], [
                        gdata.Container({
                            "name": gdata.Leaf("string", "k1"),
                            'n2': gdata.Leaf("int", 2)
                        }),
                        gdata.Container({
                            "name": gdata.Leaf("string", "k2"),
                            'n1': gdata.Leaf("int", 1),
                            'n3': gdata.Leaf("int", 3)
                        })
                    ]),
                    'd': gdata.LeafList("string", ['a', 'c'])
                })
                testing.assertEqual(r, expected)
                t.success()

            t3.lock("3", None, cont3)

        t2.lock("2", None, cont2)

    t1.lock("1", None, cont1)


########################

actor overlapping_commit(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y2}, None)

    def cont1(_r: value):
        r = t1.get()
        testing.assertEqual(r, gdata.Container())
        t1.commit("1", True)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        r = t2.get()
        testing.assertEqual(r, y1)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, merge_y1_y2)
        t.success()

    t1.lock("1", None, cont1)

########################

actor modified_commit(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t1.configure("1", {'srcA': y2}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, y2)
        t.success()

    t1.lock("1", None, cont1)

########################

actor modified_commit2(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)

    def cont1(_r: value):
        t1.configure("1", {'srcA': y2}, None)
        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, y2)
        t.success()

    t1.lock("1", None, cont1)

########################

y0 = gdata.Container({
    "a": gdata.Leaf("int", 0),
    "l1": gdata.List(["name"], [
        gdata.Container({
            "name": gdata.Leaf("string", "k4"),
            "n4": gdata.Leaf("int", 0)
        })
    ]),
    "d": gdata.LeafList("string", ["a", "b"])
})

actor modified_overlapping_commit(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y0}, None)
    t2.configure("2", {'srcB': y2}, None)

    def cont1(_r: value):
        t1.configure("1", {'srcA': y1}, None)
        t1.commit("1", True)
        t1.lock("2", None, cont2)

    def cont2(_r: value):
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, merge_y1_y2)
        t.success()

    t1.lock("1", None, cont1)

########################

y3 = gdata.Container({
    "b": gdata.Leaf("int", 0),
    "c": gdata.Leaf("int", 0),
})

actor modified_overlapping_commit2(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y3}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        t2.configure("2", {'srcB': y2}, None)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, merge_y1_y2)
        t.success()

    t1.lock("1", None, cont1)

########################

a0 = gdata.Container({
    'a': gdata.Leaf("int", 0)
})

a1 = gdata.Container({
    'a': gdata.Leaf("int", 1)
})

b1 = gdata.Container({
    'b': gdata.Leaf("int", 1)
})

a0b1 = gdata.Container({
    'a': gdata.Leaf("int", 0),
    'b': gdata.Leaf("int", 1)
})

actor config_failure(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': a0}, None)
    t2.configure("2", {'srcB': a1}, None)

    def cont1(_r: value):
        t1.commit("1", True)

        def cont2(_r: value):
            if isinstance(_r, Exception):
                t2.configure("2", {'srcB': b1}, None)
            t2.commit("2", True)
            r = t2.get()
            testing.assertEqual(r, a0b1)
            t.success()

        t2.lock("2", None, cont2)

    t1.lock("1", None, cont1)

########################

actor config_abort(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': a0}, None)
    t2.configure("2", {'srcB': a1}, None)

    def cont1(_r: value):
        t1.commit("1", False)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, a1)
        t.success()

    t1.lock("1", None, cont1)

########################

actor multi_lock(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)

    def cont1(_r: value):

        def cont2(_r: value):
            t1.configure("1", {'srcA': y2}, None)
            t1.commit("1", True)
            r = t1.get()
            testing.assertEqual(r, y2)
            t.success()

        t1.lock("1", None, cont2)

    t1.lock("1", None, cont1)

########################

actor empty_lock(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t2.configure("2", {'srcB': y3}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        t2.lock("2", None, cont2)

    def cont2(_r: value):
        t2.configure("2", {'srcB': y2}, None)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, y2)
        t.success()

    t1.lock("1", None, cont1)

########################

actor empty_lock2(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t2.configure("2", {'srcB': y3}, None)

    def cont1(_r: value):
        t1.commit("1", True)
        r2 = t2.get()
        testing.assertEqual(r2, y2)
        r1 = t1.get()
        testing.assertEqual(r1, y2)
        t.success()

    def cont2(_r: value):
        t2.configure("2", {'srcB': y2}, None)
        t2.commit("2", True)
        t1.lock("1", None, cont1)

    t2.lock("2", None, cont2)

########################

actor no_lock(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y3}, None)

    def cont2(_r: value):
        t1.commit("1", True)
        t2.configure("2", {'srcB': y2}, None)
        t2.commit("2", True)
        r = t2.get()
        testing.assertEqual(r, y2)
        t.success()

    t2.lock("2", None, cont2)

########################

actor spurious_commit(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)

    def cont1(_r: value):
        t2.commit("2", True)

        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, y1)
        t.success()

    t1.lock("1", None, cont1)

########################

actor spurious_config(t: testing.AsyncT):
    router = ttt.Transform(ttt.PassThrough) ([], None)
    t1 = router.newtrans()
    t2 = router.newtrans()

    t1.configure("1", {'srcA': y1}, None)
    t2.configure("2", {'srcB': y2}, None)

    def cont1(_r: value):
        t2.configure("2", {'srcB': y3}, None)
        t2.commit("2", True)

        t1.commit("1", True)
        r = t1.get()
        testing.assertEqual(r, y1)
        t.success()

    t1.lock("1", None, cont1)

########################

class MemoryTransform(ttt.TransformFunction):
    def transform_wrapper(self, cfg: gdata.Node, memory: ?gdata.Node, dynstate: ?gdata.Node):
        if memory is not None and isinstance(memory, gdata.Leaf):
            _memory: gdata.Leaf = memory
            t = _memory.t
            val = _memory.val
            if t == 'int' and isinstance(val, int):
                if val == 42:
                    return (cfg, memory)
        elif isinstance(cfg, gdata.Leaf):
            _cfg: gdata.Leaf = cfg
            t = _cfg.t
            val = _cfg.val
            if t == 'int' and isinstance(val, int):
                if val == 42:
                    new_memory = gdata.Leaf('int', 42)
                    return (cfg, new_memory)

        # testing.error()
        raise AssertionError("Test error")

actor transform_memory(t: testing.AsyncT):
    router = ttt.Transform(MemoryTransform) ([], None)

    s1 = ttt.Session("s1", router, None)

    def cont2(_r: value):
        t.success()

    def cont1(_r: value):
        s2 = ttt.Session("s2", router, None)
        s2.edit_config(gdata.Leaf('int', 0), None, cont2)

    s1.edit_config(gdata.Leaf('int', 42), None, cont1)

########################

class GDataWrapper(adata.MNode):
    def __init__(self, inner: gdata.Node):
        self._schema = None
        self._ns = ""
        self._name = ""
        self._parent = None
        self._inner = inner

    mut def to_gdata(self) -> gdata.Node:
        return self._inner

actor DynstateActor(update_dynstate: proc(?adata.MNode)->None, t: testing.AsyncT):
    def on_conf(conf: gdata.Node, memory: ?gdata.Node):
        if conf is not None and conf == gdata.Leaf("int", 39):
            if memory is not None and memory == gdata.Leaf("int", 40):
                update_dynstate(GDataWrapper(gdata.Leaf("int", 41)))
            elif memory is not None and memory == gdata.Leaf("int", 42):
                t.success()

class DynstateTransform(ttt.TransformFunction):
    def transform_wrapper(self, cfg: gdata.Node, memory: ?gdata.Node, dynstate: ?gdata.Node):
        if dynstate is not None and dynstate == gdata.Leaf("int", 41):
            return (cfg, gdata.Leaf("int", 42))
        elif cfg is not None and cfg == gdata.Leaf("int", 39):
            return (cfg, gdata.Leaf("int", 40))
        return (cfg, memory)

actor transform_dynstate(t: testing.AsyncT):
    def DynstateActorCtor(params: ttt.TransformActorParams) -> ?proc(gdata.Node, ?gdata.Node) -> None:
        act = DynstateActor(params.update_dynstate, t)
        return act.on_conf

    router = ttt.Transform(DynstateTransform, DynstateActorCtor) ([], None)
    s1 = ttt.Session("s1", router, None)
    s1.edit_config(gdata.Leaf("int", 39))

########################
